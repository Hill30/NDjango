<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".django" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#
MvcTextTemplateHost mvcHost = (MvcTextTemplateHost)(Host);
if (!String.IsNullOrEmpty(mvcHost.ViewDataTypeName)){
#>
{% model Model:IEnumerable<<#= mvcHost.ViewDataTypeName #>> %}
<#
}
#>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title><#= mvcHost.ViewName #></title>
</head>
<body>

<#
Dictionary<string, string> properties = new Dictionary<string, string>();
FilterProperties(mvcHost.ViewDataType, properties);
#>
    <table>
        <tr>
            <th></th>
<#
foreach(KeyValuePair<string, string> property in properties) {
#>
            <th>
                <#= property.Key #>
            </th>
<#
}
#>
        </tr>

    {% for (item in Model) %}
    
        <tr>
<#
List<string> primaryKeys = GetEntityKeyProperties(mvcHost.ViewDataType);
if(primaryKeys.Count > 0) {
#>
            <td>
                {% action-link "Edit" "Edit" new {id=item.<#= primaryKeys[0]#>} %} |
                {% action-link "Details" "Details" new {id=item.<#= primaryKeys[0] #> }%} |
                {% action-link "Delete" "Delete" new {id=item.<#= primaryKeys[0] #> }%}
            </td>
<#
} else {
#>
            <td>
                {% action-link "Edit" "Edit" new { /* id=item.PrimaryKey */ } %} |
                {% action-link "Details" "Details" new { /* id=item.PrimaryKey */ }%} |
                {% action-link "Delete" "Delete"  new { /* id=item.PrimaryKey */ }%}
            </td>
<#
}
    
foreach(KeyValuePair<string, string> property in properties) {
#>
            <td>
                <#= property.Value #> 
            </td>
<#
}
#>
        </tr>
    
    {% endfor %}

    </table>

    <p>
        {%action-link "Create New" "Create" null) %>
    </p>
</body>
</html>

<#+
public void FilterProperties(Type type, Dictionary<string, string> properties) {
    if(type != null) {
        PropertyInfo[] publicProperties = type.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);

        foreach (PropertyInfo pi in publicProperties)
        {
            if (pi.GetIndexParameters().Length > 0)
            {
                continue;
            }
            
            Type currentPropertyType = pi.PropertyType;
            Type currentUnderlyingType = System.Nullable.GetUnderlyingType(currentPropertyType);
            
            if(currentUnderlyingType != null) {
                currentPropertyType = currentUnderlyingType;
            }
            
            if (IsBindableType(currentPropertyType) && pi.CanRead)
            {
                if(currentPropertyType.Equals(typeof(double)) || currentPropertyType.Equals(typeof(decimal))) {
                    properties.Add(pi.Name, "String.Format(\"{0:F}\", item." + pi.Name + ")");
                } else if(currentPropertyType.Equals(typeof(DateTime))) {
                    properties.Add(pi.Name, "String.Format(\"{0:g}\", item." + pi.Name + ")");
                } else {
                    properties.Add(pi.Name, "item." + pi.Name);
                }
            }
        }
    }
}

public bool IsBindableType(Type type)
{
    bool isBindable = false;

    if (type.IsPrimitive || type.Equals(typeof(string)) || type.Equals(typeof(DateTime)) || type.Equals(typeof(decimal)) || type.Equals(typeof(Guid)) || type.Equals(typeof(DateTimeOffset)) || type.Equals(typeof(TimeSpan)))
    {
        isBindable = true;
    }

    return isBindable;
}

public static List<string> GetEntityKeyProperties(Type type)
{
    List<string> keyProperties = new List<string>();

    PropertyInfo[] properties = type.GetProperties();

    foreach (PropertyInfo pi in properties)
    {
        System.Object[] attributes = pi.GetCustomAttributes(true);

        foreach (object attribute in attributes)
        {
            if (attribute is EdmScalarPropertyAttribute)
            {
                if ((attribute as EdmScalarPropertyAttribute).EntityKeyProperty == true)
                {
                    keyProperties.Add(pi.Name);
                }
            } else if(attribute is ColumnAttribute) {
                if ((attribute as ColumnAttribute).IsPrimaryKey == true)
                {
                    keyProperties.Add(pi.Name);
                }
            }
        }
    }

    return keyProperties;
}
#>